@model ProjectDemo.Models.InputDetails

<div class="form-container">
    <h3>Web Page Analysis </h3>
    @using (Html.BeginForm("FetchData", "Home", FormMethod.Post, new { id = "getData" }))
    {
        <div class="form-group">
            @Html.TextBoxFor(m => m.InputUrl, new { @class = "form-control", @placeholder = "Enter Url",id = "urlInput" })<br>
            @Html.ValidationMessageFor(m => m.InputUrl)
            <button type="submit" class="btn btn-primary">Submit</button>

        </div>
    }
</div>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<div id="resultSection">
</div>
<!--
    Ajax load partial view returned from controller without refreshing the page
    script to do LAZY LOADING of the images on partial view to load them on scroll to improve performance
-->
@section Scripts {
    <script>
        function lazyLoadImages() {
            console.log('Lazy loading function executed');
            const images = document.querySelectorAll('.lazy-load');
            console.log('Total images found:', images.length);

            const options = {
                root: null,
                rootMargin: '0px',
                threshold: 0.1
            };

            const observer = new IntersectionObserver(function (entries, observer) {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.getAttribute('data-src');
                        img.classList.remove('lazy-load');
                        observer.unobserve(img);
                    }
                });
            }, options);

            images.forEach(image => {
                observer.observe(image);
            });
        }

        $(document).ready(function () {
            $('#getData').submit(function (event) {
                event.preventDefault();

                var formData = $(this).serialize();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("FetchData", "Home")',
                    data: formData,
                    success: function (result) {
                        $('#resultSection').html(result); // displays success result
                        lazyLoadImages();                 // lazy load the images on scroll
                    },
                    error: function (xhr) {
                        var errors = JSON.parse(xhr.responseText);
                        var errorHtml = '<ul>';
                        $.each(errors, function (index, value) {
                            errorHtml += '<li>' + value + '</li>';
                        });
                        errorHtml += '</ul>';
                        $('#resultSection').html(errorHtml); // Display multiple error messages
                    }
                });
            });
        });
    </script>
    }
<style>

    .form-group {
        max-width: 400px;
        margin-bottom: 20px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }
</style>
